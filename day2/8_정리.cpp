// 어제 나온 패턴

// 변하는 것을 가상함수로 -> 'templete method'
// 변하는 것을 다른 클래스로 -> 'strategy pattern'
// 객체를 복사해서 새로운 객체 만들기 -> 'prototype pattern'
// Folder는 File 뿐 아니라 Folder도 보관한다 -> 'composite pattern'

// 오늘 나온 이야기
// FileStream 은 data를 저장한다.
// ZipStream은 FileStream에 압축 기능을 동적으로 추가한다. -> 'decorator pattern'

// 기존 클래스를 사용하고 싶은데 인터페이스가 다르다 -> 'adapter pattern'

// 대신할 것 을 만들어 사용하자. -> 'proxy pattern'
// 서버를 대신한다면 -> 'remote proxy'
